" common setting {{{
let mapleader = ';'
set nocompatible
set ruler
set shiftwidth=4
set softtabstop=4
set tabstop=4

" set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 30

set ignorecase smartcase
set incsearch
set hlsearch
set noerrorbells
set showmatch
set smartindent
set number
set encoding=utf-8
set fileformat=unix
set textwidth=79
set splitbelow
set splitright
set autoindent
" }}}

" for vimrc edit or source {{{
nnoremap <Leader>ev :vsplit $MYVIMRC<cr>
nnoremap <Leader>sv :source $MYVIMRC<cr>
" }}}

" vim script code fold {{{
augroup filetype_vim
	autocmd!
	autocmd FileType vim setlocal foldmethod=marker
augroup END
" }}}

" vim plugin list {{{
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
" plugin manager
Plug 'junegunn/vim-plug'

" fuzzy finder
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" highlight the keywords
Plug 'lfv89/vim-interestingwords'

" comment/uncomment tool
Plug 'scrooloose/nerdcommenter'

" colorschemes
Plug 'flazz/vim-colorschemes'

" the vim start screen
Plug 'mhinz/vim-startify'

" format code
Plug 'Chiel92/vim-autoformat'

" file template when create new file
Plug 'aperezdc/vim-template'

" quoting/parentheses made simple
Plug 'tpope/vim-surround'

" show diff with style
Plug 'mhinz/vim-signify'

" show tags in a window
Plug 'majutsushi/tagbar'

" file system explorer
Plug 'scrooloose/nerdtree'

" the ultimate snippet solution for Vim
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" the code search 
Plug 'mileszs/ack.vim'

" insert or delete brackets, parens, quotes in pair 
Plug 'jiangmiao/auto-pairs'

" a git wrapper
Plug 'tpope/vim-fugitive'

" find and replace plugin
Plug 'brooth/far.vim'

" asynchronous linting/fixing
Plug 'w0rp/ale'

" sort python imports
Plug 'fisadev/vim-isort'

" a simple function navigator
Plug 'tacahiroy/ctrlp-funky'
Plug 'ctrlpvim/ctrlp.vim'

" flake8 for vim
"Plug 'nvie/vim-flake8'

" the code complete
Plug 'Valloric/YouCompleteMe'

" status line

" for python
Plug 'davidhalter/jedi-vim'
Plug 'vim-scripts/indentpython.vim'

" incremental search
Plug 'haya14busa/incsearch.vim'

call plug#end()
" }}}

" fzf setting {{{
nnoremap <c-p> :FZF<CR>
" }}}

" tagbar setting {{{
nnoremap <F8> :TagbarToggle<CR>
" }}}

" UltiSnips setting {{{
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-l>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
" }}}

" ack setting {{{
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

cnoreabbrev Ack Ack!
nnoremap <Leader>a :Ack!<Space>
" }}}

" auto format code
noremap <F3> :Autoformat<CR>
" format when write to file
" autocmd BufWrite * :Autoformat

"NERDTree window
nnoremap <F9> :NERDTreeToggle<CR>

" isort setting
let g:vim_isort_map = '<C-i>'
let g:vim_isort_python_version = 'python2'

" ctrlp_funky setting
nnoremap <Leader>fu :CtrlPFunky<Cr>
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>

" ctrlp setting
" not use ctrlp for file find
let g:ctrlp_map = ''

" airline setting
let g:airline_powerline_fonts = 1

" enable folding
set foldmethod=indent
set foldlevel=99

nnoremap <space> za


" ignore files in NERDTree
let NERDTreeIgnore=['\.pyc$', '\~$'] 

" for ycm
nmap gd :YcmCompleter GoToDeclaration<CR>
nmap gf :YcmCompleter GoToDefinition<CR>
nmap ga :YcmCompleter GoToDefinitionElseDeclaration<CR>

" for vim-signify config
let g:signify_disable_by_default = 0


" default colorscheme
colorscheme molokai

" incsearch setting
"map /  <Plug>(incsearch-forward)
"map ?  <Plug>(incsearch-backword)
map g/ <Plug>(incsearch-stay)
nnoremap <Esc><Esc> :<C-u>nohlsearch<CR>

" :h g:incsearch#auto_nohlsearch
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" for powerline
set rtp+=/usr/local/lib/python2.7/dist-packages/powerline/bindings/vim
set laststatus=2
set t_Co=256
let g:Powerline_symbols='fancy'
